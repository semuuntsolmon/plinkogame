/* Reset and Global Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

:root {
    --primary-bg: #0d1421;
    --secondary-bg: #182338;
    --accent-blue: #0068ff;
    --success-green: #00c74d;
    --danger-red: #ff3b3b;
    --text-primary: #ffffff;
    --text-secondary: #8b98b2;
    --border-color: #293956;
    --slot-low: #ff3b3b;
    --slot-medium: #ffae3b;
    --slot-high: #00c74d;
}

body {
    background-color: var(--primary-bg);
    color: var(--text-primary);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

/* Header Styles */
header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background-color: var(--secondary-bg);
    height: 60px;
    border-bottom: 1px solid var(--border-color);
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--text-primary);
}

.balance-container {
    background-color: var(--primary-bg);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.balance-value {
    font-weight: bold;
}

.balance-currency {
    color: var(--accent-blue);
}

.balance-dropdown {
    color: var(--text-secondary);
    cursor: pointer;
}

/* Main Content Styles */
main {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.game-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
    background-color: var(--secondary-bg);
    padding: 1rem;
    overflow: hidden;
}

#game-canvas {
    flex: 1;
    width: 100%;
    height: 100%;
    display: block;
}

.multipliers-container {
    display: flex;
    justify-content: space-between;
    width: 100%;
    height: 40px;
    margin-top: 1rem;
}

.multiplier {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 0.9rem;
    border-radius: 4px;
    margin: 0 1px;
}

.recent-drops {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    width: 60px;
}

.recent-drop {
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 4px;
    padding: 5px;
    color: white;
    text-align: center;
    font-weight: bold;
    animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Controls Panel Styles */
.controls-panel {
    background-color: var(--secondary-bg);
    padding: 1rem;
    border-top: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.control-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.control-group label {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.bet-input-container {
    display: flex;
    position: relative;
}

#bet-amount {
    width: 100%;
    padding: 0.75rem;
    padding-right: 3rem;
    background-color: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-primary);
    font-size: 1rem;
}

.bet-currency {
    position: absolute;
    right: 3.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
}

.bet-shortcuts {
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    border-left: 1px solid var(--border-color);
}

.bet-half, .bet-double {
    background: none;
    border: none;
    color: var(--text-secondary);
    padding: 0 10px;
    height: 100%;
    cursor: pointer;
}

.bet-half:hover, .bet-double:hover {
    color: var(--text-primary);
}

.select-container {
    position: relative;
}

.select-container select {
    width: 100%;
    padding: 0.75rem;
    background-color: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-primary);
    appearance: none;
    cursor: pointer;
    font-size: 1rem;
}

.select-container i {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: var(--text-secondary);
}

.bet-mode {
    display: flex;
    flex-direction: row;
}

.bet-mode-btn {
    flex: 1;
    padding: 0.75rem;
    background-color: var(--primary-bg);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    cursor: pointer;
    text-align: center;
    font-weight: bold;
}

.bet-mode-btn:first-child {
    border-radius: 4px 0 0 4px;
}

.bet-mode-btn:last-child {
    border-radius: 0 4px 4px 0;
}

.bet-mode-btn.active {
    background-color: var(--accent-blue);
    border-color: var(--accent-blue);
}

.drop-btn {
    padding:.95rem;
    background-color: var(--success-green);
    border: none;
    border-radius: 4px;
    color: white;
    font-weight: bold;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s;
}

.drop-btn:hover {
    background-color: #00b043;
}

.drop-btn:disabled {
    background-color: #007b31;
    cursor: not-allowed;
}

/* Footer Controls */
.footer-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background-color: var(--secondary-bg);
    border-top: 1px solid var(--border-color);
}

.left-controls {
    display: flex;
    gap: 1rem;
}

.footer-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.2rem;
    cursor: pointer;
}

.footer-btn:hover {
    color: var(--text-primary);
}

.fairness-text {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 100;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background-color: var(--secondary-bg);
    padding: 1.5rem;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
}

.modal h3 {
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

.settings-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.close-modal {
    width: 100%;
    padding: 0.75rem;
    background-color: var(--accent-blue);
    border: none;
    border-radius: 4px;
    color: white;
    font-weight: bold;
    cursor: pointer;
    margin-top: 1rem;
}

/* Toggle Switch */
.switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--primary-bg);
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
}

input:checked + .slider {
    background-color: var(--accent-blue);
}

input:checked + .slider:before {
    transform: translateX(26px);
}

.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

/* Win Notification */
.win-notification {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    background-color: rgba(0, 0, 0, 0.8);
    padding: 1.5rem;
    border-radius: 8px;
    z-index: 200;
    text-align: center;
    transition: transform 0.3s ease-in-out;
}

.win-notification.show {
    transform: translate(-50%, -50%) scale(1);
}

.win-text {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
}

.win-amount {
    color: var(--success-green);
    font-weight: bold;
}

/* Risk level colors */
.risk-low { background-color: #3498db; }
.risk-medium { background-color: #f39c12; }
.risk-high { background-color: #e74c3c; }

/* Multiplier slot colors */
.slot-1000x { background-color: #e74c3c; }
.slot-130x { background-color: #e74c3c; }
.slot-26x { background-color: #e74c3c; }
.slot-9x { background-color: #e67e22; }
.slot-4x { background-color: #e67e22; }
.slot-2x { background-color: #f1c40f; }
.slot-0-2x { background-color: #2ecc71; }

/* Responsive Styles */
@media (min-width: 768px) {
    .controls-panel {
        flex-direction: row;
        flex-wrap: wrap;
    }
    
    .control-group {
        flex: 1;
        min-width: 150px;
    }
    
    .bet-mode, #drop-ball {
        min-width: 180px;
    }
}

@media (max-width: 480px) {
    .bet-half, .bet-double {
        padding: 0 8px;
    }
    
    .footer-controls {
        padding: 0.75rem;
    }
    
    .modal-content {
        width: 95%;
    }
}

/* Animation for ball drop */
@keyframes ballDrop {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.ball {
    position: absolute;
    border-radius: 50%;
    background-color: white;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.7);
    animation: ballDrop 0.3s ease-out;
}

/* Peg glow effect */
.peg {
    position: absolute;
    border-radius: 50%;
    background-color: white;
    transition: box-shadow 0.2s;
}

.peg.hit {
    box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.9);
}
```

### js/utils.js

```javascript
/**
 * Utility functions for the Plinko game
 */
const Utils = {
    /**
     * Generate a random number between min and max (inclusive)
     * @param {number} min - Minimum value
     * @param {number} max - Maximum value
     * @returns {number} - Random number
     */
    random: function(min, max) {
        return Math.random() * (max - min) + min;
    },
    
    /**
     * Calculate binomial coefficient C(n,k)
     * @param {number} n - Total number of items
     * @param {number} k - Number of items to choose
     * @returns {number} - Binomial coefficient
     */
    binomialCoefficient: function(n, k) {
        if (k < 0 || k > n) return 0;
        if (k === 0 || k === n) return 1;
        
        let result = 1;
        for (let i = 1; i <= k; i++) {
            result *= (n + 1 - i) / i;
        }
        
        return Math.round(result);
    },
    
    /**
     * Format a number as currency
     * @param {number} amount - Amount to format
     * @returns {string} - Formatted amount
     */
    formatCurrency: function(amount) {
        return amount.toFixed(2);
    },
    
    /**
     * Detect if the device is mobile
     * @returns {boolean} - True if mobile device
     */
    isMobile: function() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    },
    
    /**
     * Save data to localStorage
     * @param {string} key - Storage key
     * @param {any} value - Value to store
     */
    saveToStorage: function(key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    },
    
    /**
     * Load data from localStorage
     * @param {string} key - Storage key
     * @param {any} defaultValue - Default value if key not found
     * @returns {any} - Retrieved value or default
     */
    loadFromStorage: function(key, defaultValue) {
        try {
            const storedValue = localStorage.getItem(key);
            return storedValue ? JSON.parse(storedValue) : defaultValue;
        } catch (error) {
            console.error('Error loading from localStorage:', error);
            return defaultValue;
        }
    },
    
    /**
     * Debounce function to limit how often a function is called
     * @param {Function} func - Function to debounce
     * @param {number} wait - Milliseconds to wait
     * @returns {Function} - Debounced function
     */
    debounce: function(func, wait) {
        let timeout;
        return function(...args) {
            const context = this;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), wait);
        };
    },
    
    /**
     * Get multiplier color based on value
     * @param {number} value - Multiplier value
     * @returns {string} - CSS color
     */
    getMultiplierColor: function(value) {
        if (value >= 100) return '#e74c3c'; // Red
        if (value >= 10) return '#e67e22';  // Orange
        if (value >= 2) return '#f1c40f';   // Yellow
        return '#2ecc71';                   // Green
    },
    
    /**
     * Calculate probability for a path in Pascal's triangle
     * @param {number} rows - Number of rows
     * @param {number} position - Position in bottom row
     * @returns {number} - Probability
     */
    calculatePathProbability: function(rows, position) {
        return this.binomialCoefficient(rows, position) / Math.pow(2, rows);
    },
    
    /**
     * Generate multiplier values based on risk level and row count
     * @param {string} riskLevel - Risk level (low, medium, high)
     * @param {number} slots - Number of slots
     * @returns {Array} - Array of multipliers
     */
    generateMultipliers: function(riskLevel, slots) {
        const multipliers = [];
        const centerIndex = Math.floor(slots / 2);
        
        // Different multiplier distributions based on risk level
        const multiplierSets = {
            low: {
                min: 0.2,
                max: 9,
                curve: 1.5
            },
            medium: {
                min: 0.3,
                max: 25,
                curve: 2.5
            },
            high: {
                min: 0.2,
                max: 1000,
                curve: 4
            }
        };
        
        const { min, max, curve } = multiplierSets[riskLevel];
        
        // Generate multipliers based on position and risk level
        for (let i = 0; i < slots; i++) {
            // Calculate distance from center (normalized to 0-1)
            const distanceFromCenter = Math.abs(i - centerIndex) / centerIndex;
            
            let multiplier;
            if (riskLevel === 'high' && (i === 0 || i === slots - 1)) {
                // Extreme positions for high risk get highest values
                multiplier = 1000;
            } else if (riskLevel === 'high' && (i === 1 || i === slots - 2)) {
                // Near-extreme positions for high risk
                multiplier = 130;
            } else if (riskLevel === 'high' && (i === 2 || i === slots - 3)) {
                // Near-extreme positions for high risk
                multiplier = 26;
            } else {
                // Distribution formula
                multiplier = min + (max - min) * Math.pow(distanceFromCenter, curve);
                
                // Round to nearest standard value
                if (multiplier > 10) multiplier = Math.round(multiplier);
                else if (multiplier > 2) multiplier = Math.round(multiplier * 2) / 2;
                else multiplier = Math.round(multiplier * 10) / 10;
            }
            
            // Edge cases for very specific positions
            if (riskLevel === 'high') {
                if (i >= 4 && i <= slots - 5) {
                    if (Math.abs(i - centerIndex) <= 1) {
                        multiplier = 0.2;
                    } else if (Math.abs(i - centerIndex) <= 3) {
                        multiplier = 2;
                    }
                }
            }
            
            multipliers.push(multiplier);
        }
        
        return multipliers;
    }
};
